     0  *ast.File {
     1  .  Position: ast.Position {}
     2  .  Name: *ast.Ident {
     3  .  .  Name: "statements.js"
     4  .  .  Position: ast.Position {}
     5  .  }
     6  .  Decls: []ast.Decl (len = 3) {
     7  .  .  0: *ast.FuncDecl {
     8  .  .  .  Position: ast.Position {}
     9  .  .  .  Name: *ast.Ident {
    10  .  .  .  .  Name: "TryStatement"
    11  .  .  .  .  Position: ast.Position {}
    12  .  .  .  }
    13  .  .  .  Type: *ast.FuncType {
    14  .  .  .  .  Position: ast.Position {}
    15  .  .  .  .  Params: *ast.FieldList {
    16  .  .  .  .  .  Position: ast.Position {}
    17  .  .  .  .  }
    18  .  .  .  }
    19  .  .  .  Body: *ast.BlockStmt {
    20  .  .  .  .  Position: ast.Position {}
    21  .  .  .  .  List: []ast.Stmt (len = 1) {
    22  .  .  .  .  .  0: *ast.TryStmt {
    23  .  .  .  .  .  .  Position: ast.Position {}
    24  .  .  .  .  .  .  Body: *ast.BlockStmt {
    25  .  .  .  .  .  .  .  Position: ast.Position {}
    26  .  .  .  .  .  .  .  List: []ast.Stmt (len = 2) {
    27  .  .  .  .  .  .  .  .  0: *ast.AssignStmt {
    28  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    29  .  .  .  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
    30  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
    31  .  .  .  .  .  .  .  .  .  .  .  Name: "value"
    32  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    33  .  .  .  .  .  .  .  .  .  .  }
    34  .  .  .  .  .  .  .  .  .  }
    35  .  .  .  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
    36  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
    37  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    38  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
    39  .  .  .  .  .  .  .  .  .  .  .  Value: "test"
    40  .  .  .  .  .  .  .  .  .  .  }
    41  .  .  .  .  .  .  .  .  .  }
    42  .  .  .  .  .  .  .  .  }
    43  .  .  .  .  .  .  .  .  1: *ast.ExprStmt {
    44  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    45  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
    46  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    47  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
    48  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    49  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
    50  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
    51  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    52  .  .  .  .  .  .  .  .  .  .  .  }
    53  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
    54  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
    55  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    56  .  .  .  .  .  .  .  .  .  .  .  }
    57  .  .  .  .  .  .  .  .  .  .  }
    58  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
    59  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
    60  .  .  .  .  .  .  .  .  .  .  .  .  Name: "value"
    61  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    62  .  .  .  .  .  .  .  .  .  .  .  }
    63  .  .  .  .  .  .  .  .  .  .  }
    64  .  .  .  .  .  .  .  .  .  }
    65  .  .  .  .  .  .  .  .  }
    66  .  .  .  .  .  .  .  }
    67  .  .  .  .  .  .  }
    68  .  .  .  .  .  .  CatchClause: []*ast.CatchClause (len = 1) {
    69  .  .  .  .  .  .  .  0: *ast.CatchClause {
    70  .  .  .  .  .  .  .  .  Position: ast.Position {}
    71  .  .  .  .  .  .  .  .  Parameter: *ast.Ident {
    72  .  .  .  .  .  .  .  .  .  Name: "err"
    73  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    74  .  .  .  .  .  .  .  .  }
    75  .  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
    76  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    77  .  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
    78  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
    79  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    80  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
    81  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    82  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
    83  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    84  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
    85  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
    86  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    87  .  .  .  .  .  .  .  .  .  .  .  .  .  }
    88  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
    89  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "error"
    90  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    91  .  .  .  .  .  .  .  .  .  .  .  .  .  }
    92  .  .  .  .  .  .  .  .  .  .  .  .  }
    93  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
    94  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
    95  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "err"
    96  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
    97  .  .  .  .  .  .  .  .  .  .  .  .  .  }
    98  .  .  .  .  .  .  .  .  .  .  .  .  }
    99  .  .  .  .  .  .  .  .  .  .  .  }
   100  .  .  .  .  .  .  .  .  .  .  }
   101  .  .  .  .  .  .  .  .  .  }
   102  .  .  .  .  .  .  .  .  }
   103  .  .  .  .  .  .  .  }
   104  .  .  .  .  .  .  }
   105  .  .  .  .  .  .  Finalizer: *ast.BlockStmt {
   106  .  .  .  .  .  .  .  Position: ast.Position {}
   107  .  .  .  .  .  .  .  List: []ast.Stmt (len = 2) {
   108  .  .  .  .  .  .  .  .  0: *ast.AssignStmt {
   109  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   110  .  .  .  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
   111  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   112  .  .  .  .  .  .  .  .  .  .  .  Name: "sum"
   113  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   114  .  .  .  .  .  .  .  .  .  .  }
   115  .  .  .  .  .  .  .  .  .  }
   116  .  .  .  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
   117  .  .  .  .  .  .  .  .  .  .  0: *ast.BinaryExpr {
   118  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   119  .  .  .  .  .  .  .  .  .  .  .  Left: *ast.BasicLit {
   120  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   121  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "number"
   122  .  .  .  .  .  .  .  .  .  .  .  .  Value: "1"
   123  .  .  .  .  .  .  .  .  .  .  .  }
   124  .  .  .  .  .  .  .  .  .  .  .  Op: ""
   125  .  .  .  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
   126  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   127  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "number"
   128  .  .  .  .  .  .  .  .  .  .  .  .  Value: "1"
   129  .  .  .  .  .  .  .  .  .  .  .  }
   130  .  .  .  .  .  .  .  .  .  .  }
   131  .  .  .  .  .  .  .  .  .  }
   132  .  .  .  .  .  .  .  .  }
   133  .  .  .  .  .  .  .  .  1: *ast.ExprStmt {
   134  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   135  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   136  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   137  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   138  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   139  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   140  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   141  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   142  .  .  .  .  .  .  .  .  .  .  .  }
   143  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   144  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   145  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   146  .  .  .  .  .  .  .  .  .  .  .  }
   147  .  .  .  .  .  .  .  .  .  .  }
   148  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   149  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   150  .  .  .  .  .  .  .  .  .  .  .  .  Name: "sum"
   151  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   152  .  .  .  .  .  .  .  .  .  .  .  }
   153  .  .  .  .  .  .  .  .  .  .  }
   154  .  .  .  .  .  .  .  .  .  }
   155  .  .  .  .  .  .  .  .  }
   156  .  .  .  .  .  .  .  }
   157  .  .  .  .  .  .  }
   158  .  .  .  .  .  }
   159  .  .  .  .  }
   160  .  .  .  }
   161  .  .  }
   162  .  .  1: *ast.FuncDecl {
   163  .  .  .  Position: ast.Position {}
   164  .  .  .  Name: *ast.Ident {
   165  .  .  .  .  Name: "WhileStatement"
   166  .  .  .  .  Position: ast.Position {}
   167  .  .  .  }
   168  .  .  .  Type: *ast.FuncType {
   169  .  .  .  .  Position: ast.Position {}
   170  .  .  .  .  Params: *ast.FieldList {
   171  .  .  .  .  .  Position: ast.Position {}
   172  .  .  .  .  }
   173  .  .  .  }
   174  .  .  .  Body: *ast.BlockStmt {
   175  .  .  .  .  Position: ast.Position {}
   176  .  .  .  .  List: []ast.Stmt (len = 1) {
   177  .  .  .  .  .  0: *ast.LabeledStatement {
   178  .  .  .  .  .  .  Position: ast.Position {}
   179  .  .  .  .  .  .  Label: *ast.Ident {
   180  .  .  .  .  .  .  .  Name: "whileStmt"
   181  .  .  .  .  .  .  .  Position: ast.Position {}
   182  .  .  .  .  .  .  }
   183  .  .  .  .  .  .  Body: []ast.Stmt (len = 2) {
   184  .  .  .  .  .  .  .  0: *ast.StatementIdentifier {
   185  .  .  .  .  .  .  .  .  Position: ast.Position {}
   186  .  .  .  .  .  .  .  }
   187  .  .  .  .  .  .  .  1: *ast.WhileStmt {
   188  .  .  .  .  .  .  .  .  Position: ast.Position {}
   189  .  .  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
   190  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   191  .  .  .  .  .  .  .  .  .  Left: *ast.Ident {
   192  .  .  .  .  .  .  .  .  .  .  Name: "i"
   193  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   194  .  .  .  .  .  .  .  .  .  }
   195  .  .  .  .  .  .  .  .  .  Op: ""
   196  .  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
   197  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   198  .  .  .  .  .  .  .  .  .  .  Kind: "number"
   199  .  .  .  .  .  .  .  .  .  .  Value: "5"
   200  .  .  .  .  .  .  .  .  .  }
   201  .  .  .  .  .  .  .  .  }
   202  .  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
   203  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   204  .  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 3) {
   205  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   206  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   207  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   208  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   209  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   210  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   211  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   212  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   213  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   214  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   215  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   216  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   217  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   218  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   219  .  .  .  .  .  .  .  .  .  .  .  .  }
   220  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   221  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   222  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   223  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   224  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "test"
   225  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   226  .  .  .  .  .  .  .  .  .  .  .  .  }
   227  .  .  .  .  .  .  .  .  .  .  .  }
   228  .  .  .  .  .  .  .  .  .  .  }
   229  .  .  .  .  .  .  .  .  .  .  1: *ast.IfStmt {
   230  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   231  .  .  .  .  .  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
   232  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   233  .  .  .  .  .  .  .  .  .  .  .  .  Left: *ast.Ident {
   234  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "i"
   235  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   236  .  .  .  .  .  .  .  .  .  .  .  .  }
   237  .  .  .  .  .  .  .  .  .  .  .  .  Op: ""
   238  .  .  .  .  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
   239  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   240  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "number"
   241  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "4"
   242  .  .  .  .  .  .  .  .  .  .  .  .  }
   243  .  .  .  .  .  .  .  .  .  .  .  }
   244  .  .  .  .  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
   245  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   246  .  .  .  .  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 2) {
   247  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   248  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   249  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   250  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   251  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   252  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   253  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   254  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   255  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   256  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   257  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   258  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   259  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   260  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   261  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   262  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   263  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   264  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   265  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   266  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "finish"
   267  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   268  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   269  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   270  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   271  .  .  .  .  .  .  .  .  .  .  .  .  .  1: *ast.BreakStatement {
   272  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   273  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Label: *ast.Ident {
   274  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "whileStmt"
   275  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   276  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   277  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   278  .  .  .  .  .  .  .  .  .  .  .  .  }
   279  .  .  .  .  .  .  .  .  .  .  .  }
   280  .  .  .  .  .  .  .  .  .  .  }
   281  .  .  .  .  .  .  .  .  .  .  2: *ast.IfStmt {
   282  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   283  .  .  .  .  .  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
   284  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   285  .  .  .  .  .  .  .  .  .  .  .  .  Left: *ast.Ident {
   286  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "i"
   287  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   288  .  .  .  .  .  .  .  .  .  .  .  .  }
   289  .  .  .  .  .  .  .  .  .  .  .  .  Op: ""
   290  .  .  .  .  .  .  .  .  .  .  .  .  Right: *ast.BasicLit {
   291  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   292  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "number"
   293  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "2"
   294  .  .  .  .  .  .  .  .  .  .  .  .  }
   295  .  .  .  .  .  .  .  .  .  .  .  }
   296  .  .  .  .  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
   297  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   298  .  .  .  .  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 2) {
   299  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   300  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   301  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   302  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   303  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   304  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   305  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   306  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   307  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   308  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   309  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   310  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   311  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   312  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   313  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   314  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   315  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   316  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   317  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   318  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "two"
   319  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   320  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   321  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   322  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   323  .  .  .  .  .  .  .  .  .  .  .  .  .  1: *ast.ContinueStatement {
   324  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   325  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Label: *ast.Ident {
   326  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "whileStmt"
   327  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   328  .  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   329  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   330  .  .  .  .  .  .  .  .  .  .  .  .  }
   331  .  .  .  .  .  .  .  .  .  .  .  }
   332  .  .  .  .  .  .  .  .  .  .  }
   333  .  .  .  .  .  .  .  .  .  }
   334  .  .  .  .  .  .  .  .  }
   335  .  .  .  .  .  .  .  }
   336  .  .  .  .  .  .  }
   337  .  .  .  .  .  }
   338  .  .  .  .  }
   339  .  .  .  }
   340  .  .  }
   341  .  .  2: *ast.FuncDecl {
   342  .  .  .  Position: ast.Position {}
   343  .  .  .  Name: *ast.Ident {
   344  .  .  .  .  Name: "SwitchStatement"
   345  .  .  .  .  Position: ast.Position {}
   346  .  .  .  }
   347  .  .  .  Type: *ast.FuncType {
   348  .  .  .  .  Position: ast.Position {}
   349  .  .  .  .  Params: *ast.FieldList {
   350  .  .  .  .  .  Position: ast.Position {}
   351  .  .  .  .  }
   352  .  .  .  }
   353  .  .  .  Body: *ast.BlockStmt {
   354  .  .  .  .  Position: ast.Position {}
   355  .  .  .  .  List: []ast.Stmt (len = 2) {
   356  .  .  .  .  .  0: *ast.AssignStmt {
   357  .  .  .  .  .  .  Position: ast.Position {}
   358  .  .  .  .  .  .  LHS: []ast.Expr (len = 1) {
   359  .  .  .  .  .  .  .  0: *ast.Ident {
   360  .  .  .  .  .  .  .  .  Name: "fruits"
   361  .  .  .  .  .  .  .  .  Position: ast.Position {}
   362  .  .  .  .  .  .  .  }
   363  .  .  .  .  .  .  }
   364  .  .  .  .  .  .  RHS: []ast.Expr (len = 1) {
   365  .  .  .  .  .  .  .  0: *ast.BasicLit {
   366  .  .  .  .  .  .  .  .  Position: ast.Position {}
   367  .  .  .  .  .  .  .  .  Kind: "string"
   368  .  .  .  .  .  .  .  .  Value: "Oranges"
   369  .  .  .  .  .  .  .  }
   370  .  .  .  .  .  .  }
   371  .  .  .  .  .  }
   372  .  .  .  .  .  1: *ast.SwitchStatement {
   373  .  .  .  .  .  .  Position: ast.Position {}
   374  .  .  .  .  .  .  Value: *ast.Ident {
   375  .  .  .  .  .  .  .  Name: "fruits"
   376  .  .  .  .  .  .  .  Position: ast.Position {}
   377  .  .  .  .  .  .  }
   378  .  .  .  .  .  .  Body: *ast.BlockStmt {
   379  .  .  .  .  .  .  .  Position: ast.Position {}
   380  .  .  .  .  .  .  .  List: []ast.Stmt (len = 4) {
   381  .  .  .  .  .  .  .  .  0: *ast.SwitchCase {
   382  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   383  .  .  .  .  .  .  .  .  .  Cond: *ast.BasicLit {
   384  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   385  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   386  .  .  .  .  .  .  .  .  .  .  Value: "Oranges"
   387  .  .  .  .  .  .  .  .  .  }
   388  .  .  .  .  .  .  .  .  .  Body: []ast.Stmt (len = 2) {
   389  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   390  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   391  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   392  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   393  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   394  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   395  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   396  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   397  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   398  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   399  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   400  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   401  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   402  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   403  .  .  .  .  .  .  .  .  .  .  .  .  }
   404  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   405  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   406  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   407  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   408  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "Oranges"
   409  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   410  .  .  .  .  .  .  .  .  .  .  .  .  }
   411  .  .  .  .  .  .  .  .  .  .  .  }
   412  .  .  .  .  .  .  .  .  .  .  }
   413  .  .  .  .  .  .  .  .  .  .  1: *ast.BreakStatement {
   414  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   415  .  .  .  .  .  .  .  .  .  .  }
   416  .  .  .  .  .  .  .  .  .  }
   417  .  .  .  .  .  .  .  .  }
   418  .  .  .  .  .  .  .  .  1: *ast.SwitchCase {
   419  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   420  .  .  .  .  .  .  .  .  .  Cond: *ast.BasicLit {
   421  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   422  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   423  .  .  .  .  .  .  .  .  .  .  Value: "Mangoes"
   424  .  .  .  .  .  .  .  .  .  }
   425  .  .  .  .  .  .  .  .  .  Body: []ast.Stmt (len = 2) {
   426  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   427  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   428  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   429  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   430  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   431  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   432  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   433  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   434  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   435  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   436  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   437  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   438  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   439  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   440  .  .  .  .  .  .  .  .  .  .  .  .  }
   441  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   442  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   443  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   444  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   445  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "Mangoes"
   446  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   447  .  .  .  .  .  .  .  .  .  .  .  .  }
   448  .  .  .  .  .  .  .  .  .  .  .  }
   449  .  .  .  .  .  .  .  .  .  .  }
   450  .  .  .  .  .  .  .  .  .  .  1: *ast.BreakStatement {
   451  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   452  .  .  .  .  .  .  .  .  .  .  }
   453  .  .  .  .  .  .  .  .  .  }
   454  .  .  .  .  .  .  .  .  }
   455  .  .  .  .  .  .  .  .  2: *ast.SwitchCase {
   456  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   457  .  .  .  .  .  .  .  .  .  Cond: *ast.BasicLit {
   458  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   459  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   460  .  .  .  .  .  .  .  .  .  .  Value: "Papayas"
   461  .  .  .  .  .  .  .  .  .  }
   462  .  .  .  .  .  .  .  .  .  Body: []ast.Stmt (len = 2) {
   463  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   464  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   465  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   466  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   467  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   468  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   469  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   470  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   471  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   472  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   473  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   474  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   475  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   476  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   477  .  .  .  .  .  .  .  .  .  .  .  .  }
   478  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   479  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   480  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   481  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   482  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "Papayas"
   483  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   484  .  .  .  .  .  .  .  .  .  .  .  .  }
   485  .  .  .  .  .  .  .  .  .  .  .  }
   486  .  .  .  .  .  .  .  .  .  .  }
   487  .  .  .  .  .  .  .  .  .  .  1: *ast.BreakStatement {
   488  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   489  .  .  .  .  .  .  .  .  .  .  }
   490  .  .  .  .  .  .  .  .  .  }
   491  .  .  .  .  .  .  .  .  }
   492  .  .  .  .  .  .  .  .  3: *ast.SwitchDefault {
   493  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   494  .  .  .  .  .  .  .  .  .  Body: []ast.Stmt (len = 1) {
   495  .  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   496  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   497  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.CallExpr {
   498  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   499  .  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.SelectorExpr {
   500  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   501  .  .  .  .  .  .  .  .  .  .  .  .  .  Expr: *ast.Ident {
   502  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "console"
   503  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   504  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   505  .  .  .  .  .  .  .  .  .  .  .  .  .  Sel: *ast.Ident {
   506  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "log"
   507  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   508  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   509  .  .  .  .  .  .  .  .  .  .  .  .  }
   510  .  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   511  .  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   512  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Position: ast.Position {}
   513  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: "string"
   514  .  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "No fruits"
   515  .  .  .  .  .  .  .  .  .  .  .  .  .  }
   516  .  .  .  .  .  .  .  .  .  .  .  .  }
   517  .  .  .  .  .  .  .  .  .  .  .  }
   518  .  .  .  .  .  .  .  .  .  .  }
   519  .  .  .  .  .  .  .  .  .  }
   520  .  .  .  .  .  .  .  .  }
   521  .  .  .  .  .  .  .  }
   522  .  .  .  .  .  .  }
   523  .  .  .  .  .  }
   524  .  .  .  .  }
   525  .  .  .  }
   526  .  .  }
   527  .  }
   528  }
